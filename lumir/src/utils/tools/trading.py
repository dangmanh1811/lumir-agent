
import os
import pandas as pd
import math
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

def read_trading_excel(file_path: str) -> pd.DataFrame:
    """ƒê·ªçc file Excel giao d·ªãch v√† tr·∫£ v·ªÅ DataFrame ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch"""
    try:
        # ƒê·ªçc file Excel
        if file_path.endswith('.xlsx'):
            df = pd.read_excel(file_path)
        elif file_path.endswith('.xls'):
            df = pd.read_excel(file_path, engine='xlrd')
        else:
            raise ValueError("File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx ho·∫∑c .xls")
        
        # L√†m s·∫°ch t√™n c·ªôt
        df.columns = [str(col).strip() for col in df.columns]
        
        # √Ånh x·∫° t√™n c·ªôt v·ªÅ ti√™u chu·∫©n
        column_mapping = {
            'symbol': ['symbol', 'c·∫∑p ti·ªÅn', 'c·∫∑p', 'pair', 'instrument'],
            'side': ['side', 'h∆∞·ªõng', 'direction', 'lo·∫°i', 'type'],
            'close_time': ['close_time', 'th·ªùi gian ƒë√≥ng', 'ng√†y ƒë√≥ng', 'date', 'time'],
            'net_profit': ['net_profit', 'l·ª£i nhu·∫≠n r√≤ng', 'pnl', 'profit', 'l√£i l·ªó'],
            'commission': ['commission', 'ph√≠ giao d·ªãch', 'ph√≠', 'fee'],
            'swap': ['swap', 'ph√≠ qua ƒë√™m', 'ph√≠ swap', 'overnight'],
            'balance_after': ['balance_after', 's·ªë d∆∞ sau', 'balance', 's·ªë d∆∞'],
            'pips': ['pips', 'ƒëi·ªÉm', 'pip'],
            'volume_lots_closed': ['volume_lots_closed', 'kh·ªëi l∆∞·ª£ng ƒë√≥ng', 'volume', 'lot'],
            'quantity_closed': ['quantity_closed', 's·ªë l∆∞·ª£ng ƒë√≥ng', 'quantity', 's·ªë l∆∞·ª£ng'],
            'open_price': ['open_price', 'gi√° m·ªü', 'gi√° v√†o l·ªánh', 'entry price'],
            'close_price': ['close_price', 'gi√° ƒë√≥ng', 'gi√° tho√°t l·ªánh', 'exit price']
        }
        
        # √Åp d·ª•ng √°nh x·∫° c·ªôt
        for standard_name, possible_names in column_mapping.items():
            for possible_name in possible_names:
                if possible_name in df.columns:
                    if standard_name not in df.columns:
                        df[standard_name] = df[possible_name]
                    break
        
        # Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc
        required_columns = ['symbol', 'side', 'close_time', 'net_profit']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing_columns}")
        
        return df
        
    except Exception as e:
        print(f"L·ªói ƒë·ªçc file Excel: {e}")
        raise

def calculate_trade_index(df: pd.DataFrame):
    """T√≠nh to√°n c√°c ch·ªâ s·ªë giao d·ªãch t·ª´ d·ªØ li·ªáu"""
    # Chu·∫©n h√≥a t√™n c·ªôt
    df = df.rename(columns={c: c.strip() for c in df.columns})
    
    # Chuy·ªÉn ƒë·ªïi gi√° tr·ªã h∆∞·ªõng t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
    if 'side' in df.columns:
        df['side'] = df['side'].replace({'Mua': 'BUY', 'B√°n': 'SELL'})
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt th·ªùi gian
    if 'close_time' in df.columns:
        df['close_time'] = pd.to_datetime(df['close_time'], errors='coerce', dayfirst=True)
        df['hour'] = df['close_time'].dt.hour
        df['date'] = df['close_time'].dt.date
    
    # √âp ki·ªÉu s·ªë cho c√°c c·ªôt s·ªë
    numeric_cols = ['commission', 'swap', 'net_profit', 'balance_after', 'pips', 'volume_lots_closed']
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # T√≠nh to√°n c√°c ch·ªâ s·ªë c∆° b·∫£n
    trades = len(df)
    win_trades = df[df['net_profit'] > 0]
    loss_trades = df[df['net_profit'] < 0]
    
    win_rate_pct = (len(win_trades) / trades * 100.0) if trades > 0 else 0.0
    net_profit = float(df['net_profit'].sum()) if 'net_profit' in df.columns else 0.0
    avg_profit_per_trade = net_profit / trades if trades > 0 else 0.0
    
    profit_win = float(win_trades['net_profit'].mean()) if len(win_trades) > 0 else 0.0
    loss_loss = float(loss_trades['net_profit'].mean()) if len(loss_trades) > 0 else 0.0
    
    # T√≠nh h·ªá s·ªë l·ª£i nhu·∫≠n
    total_profit = float(win_trades['net_profit'].sum()) if len(win_trades) > 0 else 0.0
    total_loss = abs(float(loss_trades['net_profit'].sum())) if len(loss_trades) > 0 else 0.0
    profit_factor = total_profit / total_loss if total_loss > 0 else float('inf')
    
    # T√¨m l·ªánh th·∫Øng v√† thua nh·∫•t
    best_trade = float(df['net_profit'].max()) if 'net_profit' in df.columns else 0.0
    worst_trade = float(df['net_profit'].min()) if 'net_profit' in df.columns else 0.0
    
    # T√≠nh s·ªë l·ªánh l·ªó li√™n ti·∫øp t·ªëi ƒëa
    max_consecutive_losses = 0
    current_streak = 0
    for profit in df['net_profit']:
        if profit < 0:
            current_streak += 1
            max_consecutive_losses = max(max_consecutive_losses, current_streak)
        else:
            current_streak = 0
    
    # Ph√¢n t√≠ch theo c·∫∑p ti·ªÅn
    symbol_analysis = {}
    if 'symbol' in df.columns:
        for symbol in df['symbol'].unique():
            symbol_trades = df[df['symbol'] == symbol]
            symbol_analysis[symbol] = {
                'trades': len(symbol_trades),
                'profit': float(symbol_trades['net_profit'].sum()),
                'win_rate': len(symbol_trades[symbol_trades['net_profit'] > 0]) / len(symbol_trades) * 100
            }
    
    return {
        'trades': trades,
        'net_profit': net_profit,
        'win_rate_pct': win_rate_pct,
        'avg_profit_per_trade': avg_profit_per_trade,
        'avg_profit_win': profit_win,
        'avg_loss_loss': loss_loss,
        'profit_factor': profit_factor,
        'best_trade': best_trade,
        'worst_trade': worst_trade,
        'max_consecutive_losses': max_consecutive_losses,
        'symbol_analysis': symbol_analysis
    }

def generate_comprehensive_report(df: pd.DataFrame, result: Dict[str, Any]) -> str:
    """T·∫°o b√°o c√°o t·ªïng h·ª£p t·ª´ d·ªØ li·ªáu giao d·ªãch"""
    
    report_parts = [
        "üìä B√ÅO C√ÅO T·ªîNG QUAN GIAO D·ªäCH",
        "=" * 50,
        "",
        "üìà T·ªîNG QUAN",
        f"‚Ä¢ T·ªïng s·ªë l·ªánh: {result['trades']}",
        f"‚Ä¢ T·ªïng l·ª£i nhu·∫≠n: {result['net_profit']:,.2f}",
        f"‚Ä¢ T·ª∑ l·ªá th·∫Øng: {result['win_rate_pct']:.1f}%",
        f"‚Ä¢ L·ª£i nhu·∫≠n trung b√¨nh/l·ªánh: {result['avg_profit_per_trade']:,.2f}",
        "",
        "üéØ HI·ªÜU SU·∫§T",
        f"‚Ä¢ L·ªánh th·∫Øng trung b√¨nh: {result['avg_profit_win']:,.2f}",
        f"‚Ä¢ L·ªánh thua trung b√¨nh: {result['avg_loss_loss']:,.2f}",
        f"‚Ä¢ H·ªá s·ªë l·ª£i nhu·∫≠n: {result['profit_factor']:.2f}",
        f"‚Ä¢ L·ªánh th·∫Øng nh·∫•t: {result['best_trade']:,.2f}",
        f"‚Ä¢ L·ªánh thua nh·∫•t: {result['worst_trade']:,.2f}",
        "",
        "‚ö†Ô∏è R·ª¶I RO",
        f"‚Ä¢ S·ªë l·ªánh l·ªó li√™n ti·∫øp t·ªëi ƒëa: {result['max_consecutive_losses']}",
        "",
        "üí± PH√ÇN T√çCH C·∫∂P TI·ªÄN"
    ]
    
    # Th√™m ph√¢n t√≠ch theo t·ª´ng c·∫∑p ti·ªÅn
    for symbol, data in result['symbol_analysis'].items():
        report_parts.append(f"‚Ä¢ {symbol}: {data['trades']} l·ªánh, l·ª£i nhu·∫≠n: {data['profit']:,.2f}, win rate: {data['win_rate']:.1f}%")
    
    # Th√™m ƒë√°nh gi√° t·ªïng quan
    report_parts.extend([
        "",
        "üéØ ƒê√ÅNH GI√Å T·ªîNG QUAN"
    ])
    
    # ƒê√°nh gi√° hi·ªáu su·∫•t
    if result['win_rate_pct'] >= 60:
        report_parts.append("‚Ä¢ Hi·ªáu su·∫•t: üü¢ Tuy·ªát v·ªùi (>60% win rate)")
    elif result['win_rate_pct'] >= 50:
        report_parts.append("‚Ä¢ Hi·ªáu su·∫•t: üü° T·ªët (50-60% win rate)")
    else:
        report_parts.append("‚Ä¢ Hi·ªáu su·∫•t: üî¥ C·∫ßn c·∫£i thi·ªán (<50% win rate)")
    
    # ƒê√°nh gi√° r·ªßi ro
    max_risk_per_trade = abs(result['worst_trade'])
    if max_risk_per_trade <= 50:
        report_parts.append(f"‚Ä¢ Qu·∫£n l√Ω r·ªßi ro: üü¢ T·ªët (r·ªßi ro/l·ªánh: {max_risk_per_trade:,.2f})")
    else:
        report_parts.append(f"‚Ä¢ Qu·∫£n l√Ω r·ªßi ro: üî¥ C·∫ßn ki·ªÉm tra (r·ªßi ro/l·ªánh: {max_risk_per_trade:,.2f})")
    
    return "\n".join(report_parts)

def analyze_trading_excel(file_path: str) -> Dict[str, Any]:
    """
    Ph√¢n t√≠ch file Excel d·ªØ li·ªáu giao d·ªãch v√† tr·∫£ v·ªÅ nh·∫≠n ƒë·ªãnh t·ªïng h·ª£p
    
    Args:
        file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel
        
    Returns:
        Dict ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch v√† b√°o c√°o
        
    Example:
        >>> result = analyze_trading_excel("trading_data.xlsx")
        >>> print(result["report"])  # Xem b√°o c√°o t·ªïng h·ª£p
    """
    try:
        print(f"üîç ƒêang ph√¢n t√≠ch file Excel: {file_path}")
        
        # ƒê·ªçc d·ªØ li·ªáu
        df = read_trading_excel(file_path)
        print(f"‚úÖ ƒê·ªçc th√†nh c√¥ng: {len(df)} d√≤ng d·ªØ li·ªáu")
        
        # T√≠nh to√°n ch·ªâ s·ªë
        result = calculate_trade_index(df)
        print(f"‚úÖ T√≠nh to√°n ch·ªâ s·ªë ho√†n th√†nh")
        
        # T·∫°o b√°o c√°o
        report = generate_comprehensive_report(df, result)
        print(f"‚úÖ T·∫°o b√°o c√°o ho√†n th√†nh")
        
        return {
            "success": True,
            "data": df,
            "result": result,
            "report": report,
            "file_path": file_path,
            "summary": {
                "total_trades": result['trades'],
                "net_profit": result['net_profit'],
                "win_rate": result['win_rate_pct']
            }
        }
        
    except Exception as e:
        error_msg = f"L·ªói ph√¢n t√≠ch: {str(e)}"
        print(f"‚ùå {error_msg}")
        return {
            "success": False,
            "error": error_msg,
            "file_path": file_path
        }